#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from sciit import IssueRepo, IssueTree, IssueListInCommit
from sciit.commit import find_issues_in_commit
from sciit.functions import write_last_issue_commit_sha, get_sciit_ignore_path_spec
from sciit.cli.color import CPrint
from sciit.functions import RepoObjectDoesNotExistError
import colorama

colorama.init()
repo = IssueRepo()

if not repo.is_init():
    CPrint.bold_red('error: Issue Repository not setup')
    print('Solve error by building issue repository using: git sciit init')
    exit(127)

ignored_files = get_sciit_ignore_path_spec(repo)
commit = repo.head.commit
try:
    issues = find_issues_in_commit(repo, commit, ignore_files=ignored_files)
except RepoObjectDoesNotExistError as error:
    CPrint.bold_red(error)
    print('Solve error by rebuilding issue repository using: git sciit init -r')
    exit(127)

# if duplicate issues rollback commit and exit
if len(set(issues)) != len(issues):
    # get duplicates to print to user
    freq = {(x.id, x.filepath): issues.count(x) for x in issues}
    duplicates = {x for x in freq.keys() if freq[x] > 1}
    result = {}
    for duplicate in duplicates:
        if duplicate[0] not in result:
            result[duplicate[0]] = [duplicate[1]]
        else:
            result[duplicate[0]].append(duplicate[1])

    # print duplicates to user
    for (ident, files_found) in result.items():
        CPrint.bold_red(f'Duplicate Issue: {ident}')
        for file_found in files_found:
            CPrint.red(f'\tfound in {file_found}')

    repo.git.execute(['git', 'reset', 'HEAD~1', '--soft'])
    CPrint.bold_red(f'HEAD @: {repo.head.commit.summary} ~ {repo.head.commit.hexsha[:7]}')
    exit()

issue_tree = IssueTree.create_from_issues(repo, issues)
issue_commit = IssueListInCommit.create(repo, commit, issue_tree)
write_last_issue_commit_sha(repo.issue_dir, commit.hexsha)

# dealing with a detached head
try:
    location = repo.head.ref.name
except TypeError:
    location = 'DETACHED:' + repo.head.commit.hexsha

if issue_commit.open_issues > 0:
    result = str(issue_commit.open_issues) + ' Open Issues @' + location
    CPrint.bold_red(result)
else:
    result = 'No Open Issues @' + location
    CPrint.bold_green(result)
