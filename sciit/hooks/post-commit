#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Script that contains the operation to be done
 after a commit is made. This script builds the
 issues from the commit made and stores it in our
 issue repository

:@author: Nystrom Edwards
:Created: 12 July 2018
"""
from sciit import IssueRepo, IssueTree, IssueCommit
from sciit.tree import find_issues_in_tree
from sciit.functions import write_last_issue
from sciit.cli.color import CPrint
import colorama

colorama.init()
repo = IssueRepo()
commit = repo.head.commit
issues = find_issues_in_tree(repo, commit.tree)


# if duplicate issues rollback commit and exit
if len(set(issues)) != len(issues):
    # get duplicates to print to user
    freq = {(x.id, x.filepath): issues.count(x) for x in issues}
    duplicates = {x for x in freq.keys() if freq[x] > 1}
    result = {}
    for duplicate in duplicates:
        if duplicate[0] not in result:
            result[duplicate[0]] = [duplicate[1]]
        else:
            result[duplicate[0]].append(duplicate[1])

    # print duplicates to user
    for (ident, files_found) in result.items():
        CPrint.bold_red(f'Duplicate Issue: {ident}')
        for file_found in files_found:
            CPrint.red(f'\tfound in {file_found}')

    repo.git.execute(['git', 'reset', 'HEAD~1', '--soft'])
    CPrint.bold_red(
        f'HEAD @: {repo.head.commit.summary} ~ {repo.head.commit.hexsha[:7]}')
    exit()

itree = IssueTree.create(repo, issues)
icommit = IssueCommit.create(repo, commit, itree)
write_last_issue(repo.issue_dir, commit.hexsha)

# dealing with a detached head
try:
    location = repo.head.ref.name
except TypeError:
    location = 'DETACHED:' + repo.head.commit.hexsha

if icommit.open_issues > 0:
    result = str(icommit.open_issues) + \
        ' Open Issues @' + location
    CPrint.bold_red(result)
else:
    result = 'No Open Issues @' + location
    CPrint.bold_green(result)
