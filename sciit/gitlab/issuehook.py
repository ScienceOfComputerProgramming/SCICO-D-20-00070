# -*- coding: utf-8 -*-
"""Module that contains the functions needed to handle issue hooks
generated by gitlab.

:@author: Nystrom Edwards
:Created: 16 August 2018
"""
import json
import logging
from datetime import datetime, timezone, timedelta

import dateutil.parser as dateparser
from threading import Thread
from sciit.gitlab.commitapi import create_commit


def handle_issue_event(CONFIG, data):
    """Handle issue events made in the gitlab issue tracker to 
    create new commits with the issue changes
    """

    # check when the issue was last edited to make the change
    if data['object_attributes']['last_edited_at'] is not None:
        edited = dateparser.parse(
            data['object_attributes']['last_edited_at'])
        now = datetime.now(timezone.utc)
        delta = now - edited
    # check if the issue was created on gitlab
    else:
        edited = dateparser.parse(
            data['object_attributes']['created_at'])
        now = datetime.now(timezone.utc)
        delta = now - edited

    # determine if the issue is vaild to be created/edited
    logging.debug(f'seconds past = {delta.seconds}')
    if delta > timedelta(seconds=2):
        return json.dumps({"status": "Rejected",
                           "message": "This request must not be handled"})

    def worker(CONFIG, data):
        """A function that executes the issue handler within a Thread
        """
        CONFIG.repo.git.execute(['git', 'fetch', '--all'])
        CONFIG.repo.cache_issue_snapshots_from_unprocessed_commits()

        # get all the issue metadata from the request
        issue = {}
        issue['iid'] = data['object_attributes']['iid']
        issue['title'] = data['object_attributes']['title']
        issue['description'] = data['object_attributes']['description']
        commit = {}
        commit['author_name'] = data['user']['username']

        # create the commit
        create_commit(CONFIG, issue, commit)

    t = Thread(target=worker, args=(CONFIG, data))
    t.start()
    logging.info('worker thread launched')

    return json.dumps({"status": "Success",
                       "message": "Your issues were commited to gitlab"})
